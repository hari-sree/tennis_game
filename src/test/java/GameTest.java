/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

public class GameTest {
    @Test
    public void shouldReturnFalseWhenGameisNotComplete() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);
        assertFalse(game.isComplete());
    }
    @Test
    public void shouldReturnTrueWhenGameIsComplete() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);

        game.pointWonBy(playerOne);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerOne);

        assertTrue(game.isComplete());
    }
    @Test
    public void shouldReturnZeroScoreWhenGameHasNotStarted() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);
        assertEquals("0-0", game.score());
    }
    @Test
    public void shouldReturnScoreWhenPlayerOneScored() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);
        game.pointWonBy(playerOne);
        assertEquals("15-0", game.score());
    }

    @Test
    public void scoreShouldReturnDeuceWhenBothPlayersHave3Points() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerTwo);
        game.pointWonBy(playerOne);

        game.pointWonBy(playerTwo);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerTwo);

        assertEquals("Deuce", game.score());
    }

    @Test
    public void scoreShouldReturnAdvantageWhenOnePlayerScoreWhileInDeuce() {
        Player playerOne = new Player("player 1");
        Player playerTwo = new Player("player 2");

        Game game = new Game(playerOne, playerTwo);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerTwo);
        game.pointWonBy(playerOne);

        game.pointWonBy(playerTwo);
        game.pointWonBy(playerOne);
        game.pointWonBy(playerTwo);

        game.pointWonBy(playerTwo);

        assertEquals("Advantage player 2", game.score());
    }
}
